[
  {
    "name": "alert",
    "path": "alert",
    "description": "Displays a prominent alert message with optional icon and title.",
    "dependencies": [],
    "requires": [],
    "type": "component"
  },
  {
    "name": "avatar",
    "path": "avatar",
    "description": "Displays a circular user profile image with optional initials placeholder.",
    "dependencies": [],
    "requires": [],
    "type": "component"
  },
  {
    "name": "badge",
    "path": "badge",
    "description": "Small, versatile UI element used to display statuses, counts, or labels with support for variants and sizes.",
    "dependencies": [],
    "requires": [],
    "type": "component"
  },
  {
    "name": "breadcrumb",
    "path": "breadcrumb",
    "description": "Navigation component that displays the current pageâ€™s location within a site hierarchy, with support for variants and sizes.",
    "dependencies": [],
    "requires": [],
    "type": "component"
  },
  {
    "name": "button",
    "path": "button",
    "description": "Versatile button component with support for variants and sizes.",
    "dependencies": [],
    "requires": [],
    "type": "component"
  },
  {
    "name": "callout",
    "path": "callout",
    "description": "Highlights key content with an icon, title, and description.",
    "dependencies": [],
    "requires": [],
    "type": "component"
  },
  {
    "name": "dialog",
    "path": "dialog",
    "description": "Highlights key content with an icon, title, and description.",
    "dependencies": ["lucide-vue-next"],
    "requires": ["button"],
    "type": "component"
  },
  {
    "name": "icon-toggle",
    "path": "icon-toggle",
    "description": "Toggles between two icons with animated transitions on hover",
    "dependencies": [],
    "requires": [],
    "type": "component"
  },
  {
    "name": "progress",
    "path": "progress",
    "description": "Displays the current status of a process in a visual bar format. Useful for loading, uploading, or indicating task completion.",
    "dependencies": [],
    "requires": [],
    "type": "component"
  },
  {
    "name": "progressive-image",
    "path": "progressive-image",
    "description": "Displays an image with a stylish loading animation until fully loaded.",
    "dependencies": [],
    "requires": []
  },
  {
    "name": "rating",
    "path": "rating",
    "description": "Interactive star-based rating component supporting partial selection and read-only mode.",
    "dependencies": ["lucide-vue-next"],
    "requires": [],
    "type": "component"
  },
  {
    "name": "stat",
    "path": "stat",
    "description": "Presents numerical metrics or KPIs in a compact visual block.",
    "dependencies": [],
    "requires": [],
    "type": "component"
  },
  {
    "name": "switch",
    "path": "switch",
    "description": "Interactive toggle component for switching between enabled and disabled states, commonly used in settings interfaces.",
    "dependencies": [],
    "requires": [],
    "type": "component"
  },
  {
    "name": "text",
    "path": "text",
    "description": "Typography component supporting variants and semantic tags.",
    "dependencies": [],
    "requires": [],
    "type": "component"
  },
  {
    "name": "toast",
    "path": "toast",
    "description": "Small, temporary notifications appearing at the top or bottom of the screen.",
    "dependencies": [],
    "requires": ["button", "text"],
    "type": "component"
  },
  {
    "name": "useAsyncState",
    "path": "useAsyncState",
    "description": "Composable for managing async operations with reactive state including loading, error, and data handling.",
    "dependencies": [],
    "requires": [],
    "type": "composable"
  },
  {
    "name": "useCopyToClipboard",
    "path": "useCopyToClipboard",
    "description": "Composable to copy text to the clipboard using the Clipboard API, with reactive status and error handling.",
    "dependencies": [],
    "requires": [],
    "type": "composable"
  },
  {
    "name": "useEventListener",
    "path": "useEventListener",
    "description": "Composable to add and automatically clean up an event listener on a given target or reactive target function.",
    "dependencies": [],
    "requires": [],
    "type": "composable"
  },
  {
    "name": "useFocusTrap",
    "path": "useFocusTrap",
    "description": "Composable that traps keyboard focus within a specified container element, ensuring accessible keyboard navigation (focus trapping).",
    "dependencies": [],
    "requires": [],
    "type": "composable"
  },
  {
    "name": "useIdle",
    "path": "useIdle",
    "description": "Tracks user inactivity by listening to common interaction events and sets a reactive flag when the user is idle after a specified timeout.",
    "dependencies": [],
    "requires": [],
    "type": "composable"
  },
  {
    "name": "useIntersectionObserver",
    "path": "useIntersectionObserver",
    "description": "A composable that uses the Intersection Observer API to track if a DOM element is currently visible within the viewport or a specified root.",
    "dependencies": [],
    "requires": [],
    "type": "composable"
  },
  {
    "name": "usePageVisibility",
    "path": "usePageVisibility",
    "description": "Composable that tracks the visibility state of the page (whether the page is currently visible or hidden). Useful for pausing activity when the user switches tabs or minimizes the window.",
    "dependencies": [],
    "requires": [],
    "type": "composable"
  },
  {
    "name": "useScrollDirection",
    "path": "useScrollDirection",
    "description": "Composable that detects the current scroll direction of the window, returning 'up', 'down', or null if no movement.",
    "dependencies": [],
    "requires": [],
    "type": "composable"
  },
  {
    "name": "useThrottleFn",
    "path": "useThrottleFn",
    "description": "Composable to create a throttled version of a function, limiting how often it can be invoked within a specified delay.",
    "dependencies": [],
    "requires": [],
    "type": "composable"
  },
  {
    "name": "useWindowSize",
    "path": "useWindowSize",
    "description": "Composable that tracks the current window width and height, updating reactively on resize events.",
    "dependencies": [],
    "requires": [],
    "type": "composable"
  }
]
